{{ indent * level }}{{ decode_comment }}
{{ indent * level }}if ({{ type_array_len }} < {{ type_define }})
{{ indent * level }}{
{{ indent * (level + 1) }}error = {{ decode_fn }}(stream, &{{ type_array }}[{{ type_array_len }}++]);
{{ indent * level }}}
{{ indent * level }}else
{{ indent * level }}{
{{ indent * (level + 1) }}// static array not large enough, only {{ type_define }} elements
{{ indent * (level + 1) }}error = EXI_ERROR__ARRAY_OUT_OF_BOUNDS;
{{ indent * level }}}
{%- if type_option == 1 %}
{{ indent * level }}{{ type_value }}_isUsed = 1u;
{%- endif %}
{%- if type_loop_breakout == 1 %}
{{ indent * level }}// LOOP breakout code for schema given maximum, regardless of ARRAY_SIZE definition
{{ indent * level }}if ({{ type_array_len }} < {{ type_array_len_schema }})
{{ indent * level }}{
{{ indent * (level + 1) }}grammar_id = {{ next_grammar_id }};
{{ indent * level }}}
{{ indent * level }}else
{{ indent * level }}{
{{ indent * (level + 1) }}grammar_id = {{ next_grammar_id_breakout }};
{{ indent * level }}}
{%- else %}
{{ indent * level }}grammar_id = {{ next_grammar_id }};
{%- endif %}
