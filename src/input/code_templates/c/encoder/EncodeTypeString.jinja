{{ indent * level }}error = exi_basetypes_encoder_nbit_uint(stream, 1, 0);
{{ indent * level }}if (error == EXI_ERROR__NO_ERROR)
{{ indent * level }}{
{{ indent * (level + 1) }}// string should not be found in table, so add 2
{{ indent * (level + 1) }}error = exi_basetypes_encoder_uint_16(stream, (uint16_t)({{ length_parameter }} + 2));
{{ indent * (level + 1) }}if (error == EXI_ERROR__NO_ERROR)
{{ indent * (level + 1) }}{
{{ indent * (level + 2) }}error = exi_basetypes_encoder_characters(stream, {{ length_parameter }}, {{ value_parameter }}, {{ size_parameter }});
{{ indent * (level + 2) }}if (error == EXI_ERROR__NO_ERROR)
{{ indent * (level + 2) }}{
{{ indent * (level + 3) }}// encode END Element
{{ indent * (level + 3) }}error = exi_basetypes_encoder_nbit_uint(stream, 1, 0);
{{ indent * (level + 3) }}if (error == EXI_ERROR__NO_ERROR)
{{ indent * (level + 3) }}{
{{ indent * (level + 4) }}grammar_id = {{ next_grammar }};
{{ indent * (level + 3) }}}
{{ indent * (level + 2) }}}
{{ indent * (level + 1) }}}
{{ indent * level }}}
